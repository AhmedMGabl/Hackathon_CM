// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and authorization
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(LEADER)
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([teamId])
}

enum Role {
  SUPER_ADMIN  // Can upload files, manage users, see everything
  ADMIN        // Team Leader - can only see own team(s)
  LEADER       // Same as ADMIN (kept for compatibility)
}

// Team hierarchy
model Team {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  users   User[]
  mentors Mentor[]
  targets Target[]
  config  Config?

  @@index([name])
}

// Course Mentor (aka Agent)
model Mentor {
  id        String   @id @default(cuid())
  mentorId  String   @unique // External ID from Excel/Sheets
  mentorName String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  metrics MetricDaily[]
  stats   MentorStats[]

  @@index([mentorId])
  @@index([teamId])
  @@index([mentorName])
  @@index([teamId, mentorId])
}

// Daily metrics for each mentor
model MetricDaily {
  id        String   @id @default(cuid())
  mentorId  String
  mentor    Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  teamId    String   // Denormalized for faster team queries
  periodDate DateTime // Specific date (not month)
  weekOfMonth Int?   // 1-4 for weekly pacing

  // Core metrics (percentages stored as 0-100)
  ccPct     Float? // Class Consumption %
  scPct     Float? // Super-CC %
  upPct     Float? // Upgrade %
  fixedPct  Float? // Fixed %

  // Referral funnel
  referralLeads   Int?
  referralShowups Int?
  referralPaid    Int?

  // Lead recovery
  totalLeads       Int?
  recoveredLeads   Int?
  unrecoveredLeads Int?
  notes            String[] // Unrecovered notes

  // Ingestion metadata
  ingestionId String? // Links to Upload
  checksum    String? // For deduplication

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mentorId, periodDate])
  @@index([mentorId, periodDate])
  @@index([teamId, periodDate])
  @@index([periodDate])
  @@index([weekOfMonth])
}

// Student-level data for detailed analytics
model Student {
  id                String   @id @default(cuid())
  studentId         String   @unique // External student ID
  mentorId          String   // FK to mentor
  teamName          String   // Denormalized for faster queries

  // Student info
  studentLevel      String?
  packages          String?
  registrationDate  DateTime?
  firstOrderDate    DateTime?
  latestRenewalTime DateTime?

  // Fixed Rate data
  isFixed           Boolean  @default(false)
  fixedPlansCount   Int      @default(0)
  fixedTeachersCount Int     @default(0)
  completedLessonsThisMonth Int @default(0)

  // Class Consumption data
  classConsumptionLastMonth Float?
  classConsumptionThisMonth Float?

  // Lead data
  totalLeadsGenerated Int @default(0)
  isRecovered       Boolean @default(false)
  recoveryDate      DateTime?
  lastNoteDate      DateTime?

  // Referral data
  referralLeadsGenerated Int @default(0)
  referralShowups       Int @default(0)
  referralPaid          Int @default(0)

  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([mentorId])
  @@index([teamName])
  @@index([isFixed])
  @@index([isRecovered])
}

// Aggregated mentor statistics (computed daily)
model MentorStats {
  id                String   @id @default(cuid())
  mentorId          String
  mentor            Mentor   @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  periodDate        DateTime

  // Student counts
  totalStudents     Int      @default(0)
  activeStudents    Int      @default(0)

  // Class Consumption distribution
  cc0Students       Int      @default(0)  // 0 classes
  cc1to7Students    Int      @default(0)  // 1-7 classes
  cc8to11Students   Int      @default(0)  // 8-11 classes
  cc12to14Students  Int      @default(0)  // 12-14 classes
  cc15to19Students  Int      @default(0)  // 15-19 classes
  cc20PlusStudents  Int      @default(0)  // 20+ classes

  // Metrics
  avgClassConsumption Float   @default(0)
  superClassPct      Float   @default(0)
  excellentStudentRate Float  @default(0)

  // Fixed Rate
  fixedStudents     Int      @default(0)
  totalFixable      Int      @default(0)
  fixedRatePct      Float    @default(0)

  // Upgrade Rate
  firstPurchaseCount Int     @default(0)
  upgradedCount      Int     @default(0)
  upgradeRatePct     Float   @default(0)

  // Leads
  totalLeads         Int     @default(0)
  recoveredLeads     Int     @default(0)
  unrecoveredLeads   Int     @default(0)
  conversionRatePct  Float   @default(0)

  // Referrals
  referralLeads      Int     @default(0)
  referralShowups    Int     @default(0)
  referralPaid       Int     @default(0)

  // Derived metrics
  weightedScore      Float   @default(0)
  targetsHit         Int     @default(0)
  status             Status  @default(BELOW)
  rank               Int?    // Within team

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mentorId, periodDate])
  @@index([mentorId])
  @@index([periodDate])
  @@index([status])
  @@index([rank])
}

// Configuration (targets, weights, pacing, alert thresholds)
model Config {
  id     String @id @default(cuid())
  teamId String? @unique // null = global default
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // Targets (percentages stored as 0-100)
  ccTarget                  Float @default(80)
  scTarget                  Float @default(15)
  upTarget                  Float @default(25)
  fixedTarget               Float @default(60)
  referralAchievementTarget Float @default(80)
  conversionTarget          Float @default(30)

  // Weights (must sum to 100)
  ccWeight    Float @default(25)
  scWeight    Float @default(25)
  upWeight    Float @default(25)
  fixedWeight Float @default(25)

  // Status thresholds
  aboveThreshold   Float @default(100)
  warningThreshold Float @default(90)

  // Pacing week (1-4)
  pacingWeek Int @default(4)

  // Alert thresholds (JSON)
  alertThresholds Json @default("{\"belowTargetPct\": 70, \"consecutivePeriods\": 3, \"missingDataDays\": 2, \"varianceThreshold\": 30}")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

// Upload audit log
model Upload {
  id           String   @id @default(cuid())
  source       String   // "cc_file", "fixed_file", "re_file", "up_file", "all_leads_file", "google_sheets"
  sourceDetail String?  // filename or spreadsheetId
  checksum     String?  // MD5 of file content
  createdBy    String?  // User ID
  meta         Json?    // Column mappings, original headers, etc.
  status       IngestionStatus
  recordsProcessed Int
  recordsAccepted  Int
  recordsRejected  Int
  recordsUpdated   Int
  recordsCreated   Int
  errors       Json?    // Array of error objects
  createdAt    DateTime @default(now())

  @@index([source, createdAt])
  @@index([status])
  @@index([createdBy])
}

enum IngestionStatus {
  SUCCESS
  PARTIAL
  FAILED
}

enum Status {
  ABOVE
  WARNING
  BELOW
}

// Target configuration (admin-managed)
model Target {
  id        String   @id @default(cuid())
  teamId    String?  // null = global default
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  period    DateTime // Which month/quarter these apply to

  // Monthly targets (percentages stored as 0-100)
  ccTarget    Float @default(80)
  scTarget    Float @default(15)
  upTarget    Float @default(25)
  fixedTarget Float @default(60)

  // Detail targets
  referralAchievementTarget Float @default(80)
  conversionTarget          Float @default(30)

  // Status thresholds (percentages)
  aboveThreshold   Float @default(100) // ≥100% of target
  warningThreshold Float @default(90)  // ≥90% of target

  // Weights for composite score (must sum to 100)
  ccWeight    Float @default(25)
  scWeight    Float @default(25)
  upWeight    Float @default(25)
  fixedWeight Float @default(25)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, period])
  @@index([period])
}

// Alert rule definitions
model AlertRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  enabled     Boolean  @default(true)

  // Rule type and parameters (JSON-encoded conditions)
  ruleType    AlertRuleType
  conditions  Json // { metric, threshold, consecutivePeriods, variance, etc. }

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  triggeredAlerts Alert[]

  @@index([enabled])
}

enum AlertRuleType {
  BELOW_TARGET       // Below target by X% for Y consecutive periods
  MISSING_DATA       // Missing data for Z periods
  VARIANCE_SPIKE     // Sudden variance increase
}

// Triggered alerts
model Alert {
  id          String   @id @default(cuid())
  ruleId      String
  rule        AlertRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  mentorId    String   // Not FK to allow orphaned alerts
  mentorName  String
  teamName    String
  period      DateTime
  severity    Severity
  message     String
  metadata    Json?    // Additional context
  dismissed   Boolean  @default(false)
  dismissedAt DateTime?
  assignedTo  String?  // User ID
  createdAt   DateTime @default(now())

  @@index([ruleId])
  @@index([mentorId, period])
  @@index([dismissed, createdAt])
  @@index([severity])
}

enum Severity {
  INFO
  WARNING
  CRITICAL
}
